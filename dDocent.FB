#!/bin/bash

##########dDocent 1.2##########


#This script serves as an interactive bash wrapper to QC, assemble, map, and call SNPs from double digest RAD data.
#It requires that your raw data are split up by tagged individual and follow the naming convenction of:

#Pop_Sample1.F.fq and Pop_Sample1.R.fq


#Prints out title and contact info
echo -e "dDocent 1.2 \n"
echo -e "Contact jpuritz@gmail.com with any problems \n\n "

###Code to check for the required software for dDocent
echo "Checking for required software"
DEP=(freebayes cutadapt mawk bwa samtools vcftools rainbow gnuplot seqtk cd-hit-est bamToBed mergefq.pl bedtools coverageBed parallel vcfcombine bamtools)
NUMDEP=0
for i in "${DEP[@]}"
do
if which $i &> /dev/null; then
   foo=0
else
    echo "The dependency" $i "is not installed or is not in your" '$PATH'"."
    NUMDEP=$((NUMDEP + 1))
fi
done

if find ${PATH//:/ } -maxdepth 1 -name trimmomatic*jar 2> /dev/null| grep -q 'trim' ; then
	TRIMMOMATIC=$(find ${PATH//:/ } -maxdepth 1 -name trimmomatic*jar 2> /dev/null | head -1)
	else
    echo "The dependency trimmomatic is not installed or is not in your" '$PATH'"."
    NUMDEP=$((NUMDEP + 1))
	fi
	
if find ${PATH//:/ } -maxdepth 1 -name TruSeq2-PE.fa 2> /dev/null | grep -q 'Tru' ; then
	ADAPTERS=$(find ${PATH//:/ } -maxdepth 1 -name TruSeq2-PE.fa 2> /dev/null | head -1)
	else
    echo "The file listing adapters (included with trimmomatic) is not installed or is not in your" '$PATH'"."
    NUMDEP=$((NUMDEP + 1))
    fi

SAMV=$(samtools 2>&1 >/dev/null | grep Ver | sed -e 's/Version://' | cut -f2 -d " " | sed -e 's/-.*//')
	if [ "$SAMV" != "0.1.19" ]; then
        	echo "The version of Samtools installed in your" '$PATH' "is not optimized for dDocent."
        	echo -en "\007"
			echo -en "\007"
			echo -en "\007"
        		echo "Please install a version 0.1.19"
        		exit 1
        fi

RAINV=(`rainbow | head -1 | cut -f2 -d' ' `)	
	if [ "$RAINV" != "2.0.2" ]; then
        	echo "The version of Rainbow installed in your" '$PATH' "is not optimized for dDocent."
        	echo -en "\007"
			echo -en "\007"
			echo -en "\007"
        	echo "Is the version of rainbow installed newer than 2.0.2?  Enter yes or no."
			read TEST
			if [ "$TEST" != "yes" ]; then 
        		echo "Please install a version newer than 2.0.2"
        		exit 1
        	fi
        fi
FREEB=(`freebayes | grep -oh 'v[0-9].*' | sed 's/-.*//g' `)	
	if [ "$FREEB" != "v0.9.20" ]; then
        	echo "The version of FreeBayes installed in your" '$PATH' "is not optimized for dDocent."
        	echo "Please install a version 0.9.20"
        	exit 1
        fi         	
VCFTV=$(vcftools | grep VCF | sed -e 's/VCFtools\s(v//' | sed -e 's/)//')   
	if [ "$VCFTV" != "0.1.11" ]; then
        	echo "The version of VCFtools installed in your" '$PATH' "is the not optimized for dDocent."
        	echo "Please install only version 0.1.11"
        	exit 1 
		fi
if [ $NUMDEP -gt 0 ]; then
	echo -e "\nPlease install all required software before running dDocent again."
	exit 1
else
	echo -e "\nAll required software is installed!"
fi

#This code checks for individual fq labels labeled with the right convention
TEST=$(ls *.fq 2> /dev/null | wc -l )
if [ "$TEST" != "0" ]; then
echo -e "\ndDocent is now configured to work on compressed sequence files.  Please run gzip to compress your files."
echo "This is as simple as 'gzip *.fq'"
echo "Please rerun dDocent after compressing files."
exit 1
fi

#Count number of individuals in current directory
NumInd=$(ls *.F.fq.gz | wc -l)
NumInd=$(($NumInd - 0))

if [ $NumInd -gt 9 ]
        then
        MinAll=0.05
        MaxSize=9
        else
        MinAll=$(echo "scale=2; 1 / (2 * $NumInd) " | bc)
        MaxSize=$(( $NumInd - 1 ))
fi

#Create list of sample names
ls *.F.fq.gz > namelist
sed -i'' -e 's/.F.fq.gz//g' namelist
NAMES=( `cat "namelist" `)


##########User Input Section##########
#This code gets input from the user and assigns variables
######################################

#This checks that dDocent has detected the proper number of individuals and exits if incorrect
echo "$NumInd individuals are detected is this correct? Enter yes or no and press [ENTER]"

read Indcorrect

if [ "$Indcorrect" == "no" ]; then
        echo "Please double check that all fastq files are named Ind01.F.fq.gz and Ind01.R.fq.gz"
        exit 1
elif [ "$Indcorrect" == "yes" ]; then
            echo "Proceeding with $NumInd individuals"
else
        echo "Incorrect Input"
        exit 1
fi

#Tries to get number of processors, if not asks user
NUMProc=( `grep -c ^processor /proc/cpuinfo 2> /dev/null` ) 
NUMProc=$(($NUMProc + 0)) 

echo "dDocent detects $NUMProc processors available on this system."
echo "Please enter the maximum number of processors to use for this analysis."
        read NUMProc
        
if [ $NUMProc -lt 1 ]; then
        echo "Incorrect. Please enter the number of processing cores on this computer"
        read NUMProc
fi                
if [ $NUMProc -lt 1 ]; then
        echo "Incorrect input, exiting"
        exit 1
fi

NUMThr=$(($NUMProc / 4))

#Asks if user wants to trim reads.  This allows this part of the pipeline to be skipped during subsequent analyses
echo -e "\nDo you want to quality trim your reads?" 
echo "Type yes or no and press [ENTER]?"

read TRIM

#Asks if user wants to perform an assembly.  This allows this part of the pipeline to be skipped during subsequent analyses

echo -e "\nDo you want to perform an assembly?"
echo "Type yes or no and press [ENTER]?"

read ASSEMBLY

if [ "$ASSEMBLY" == "no" ]; then
        echo -e "\nReference contigs need to be in a file named reference.fasta\n"
        sleep 1
fi

#If performing de novo assembly, asks if the user wants to enter a different -c value
if [ "$ASSEMBLY" == "yes" ]; then
        echo "Reads will be assembled with Rainbow"
    echo "CD-HIT will cluster reference sequences by similarity. The -c parameter (% similarity to cluster) may need to be changed for your taxa."
    echo "Would you like to enter a new c parameter now? Type yes or no and press [ENTER]"
    read optC
    echo $optC
    if [ "$optC" == "no" ]; then
            echo "Proceeding with default 0.9 value."
            simC=0.9
        elif [ "$optC" == "yes" ]; then
            echo "Please enter new value for c. Enter in decimal form (For 90%, enter 0.9)"
            read newC
            simC=$newC
        else
            echo "Incorrect input. Proceeding with the default value."
            simC=0.9
        fi
fi

#Asks if user wants to map reads and change default mapping variables for BWA
echo "Do you want to map reads?  Type yes or no and press [ENTER]"
read MAP
if [ "$MAP" == "no" ]; then
        echo "Mapping will not be performed"
        optA=1
    	optB=4
    	optO=6
        else
                echo "BWA will be used to map reads.  You may need to adjust -A -B and -O parameters for your taxa."
                echo "Would you like to enter a new parameters now? Type yes or no and press [ENTER]"
                read optq

        if [ "$optq" == "yes" ]; then
        echo "Please enter new value for A (match score).  It should be an integer.  Default is 1."
        read newA
        optA=$newA
                echo "Please enter new value for B (mismatch score).  It should be an integer.  Default is 4."
        read newB
        optB=$newB
                echo "Please enter new value for O (gap penalty).  It should be an integer.  Default is 6."
        read newO
        optO=$newO
        else
                echo "Proceeding with default values for BWA read mapping."
                optA=1
                optB=4
                optO=6
        fi
fi
        

#Asks user for email address to notify when analysis is complete
echo ""
echo "Please enter your email address.  dDocent will email you when it is finished running."
echo "Don't worry; dDocent has no financial need to sell your email address to spammers."
read MAIL
echo ""
echo ""

if [ "$ASSEMBLY" == "no" ]; then
#Prints instructions on how to move analysis to background and disown process
echo "At this point, all configuration information has been enter and dDocent may take several hours to run." 
echo "It is recommended that you move this script to a background operation and disable terminal input and output."
echo "All data and logfiles will still be recorded."
echo "To do this:"
echo "Press control and Z simultaneously"
echo "Type 'bg' without the quotes and press enter"
echo "Type 'disown -h' again without the quotes and press enter"
echo ""
echo "Now sit back, relax, and wait for your analysis to finish."
fi

if [ "$ASSEMBLY" == "yes" ]; then
echo "dDocent will require input during the assembly stage.  Please wait until prompt says it is safe to move program to the background."
fi


#Wrapper for main program functions.  This allows the entire file to be read first before execution
main(){

#Sets a start time variable
STARTTIME=$(date)

#STACKS adds a strange _1 or _2 character to the end of processed reads, this looks for checks for errant characters and replaces them

STACKS=$(zcat ${NAMES[@]:(-1)}.F.fq.gz | head -1 | mawk '/\/1/')

if [ -z "$STACKS" ]; then

        echo "Removing the _1 character and replacing with /1 in the name of every sequence"
        for i in "${NAMES[@]}"
        do        
        zcat $i.R.fq.gz | sed -e 's:_2$:/2:g' > $i.Ra.fq
        zcat $i.F.fq.gz | sed -e 's:_1$:/1:g' > $i.Fa.fq
        mv $i.Ra.fq $i.R.fq
        mv $i.Fa.fq $i.F.fq
        rm $i.R.fq.gz
        rm $i.F.fq.gz
        gzip $i.F.fq 
        gzip $i.R.fq
        done

fi

#This allows for simultaneous assembly and quality trimming, if needed

if [[ "$TRIM" == "yes" && "$ASSEMBLY" == "yes" ]]; then
        echo "Trimming reads and simultaneously assemblying reference sequences"        
        TrimReads & 2> trim.log
        Assemble
        #setupRainbow 2> rainbow.log
        wait
fi

if [[ "$TRIM" == "yes" && "$ASSEMBLY" != "yes" ]]; then
        echo "Trimming reads"
        TrimReads 2> trim.log
fi                
                
if [[ "$TRIM" != "yes" && "$ASSEMBLY" == "yes" ]]; then                
        Assemble
        #setupRainbow 2> rainbow.log
fi



##Use BWA to map reads to assembly

#This code checks if the reference indexes need to be remade, if mapping
if [ "$MAP" != "no" ]; then
echo "Using BWA to map reads."
        samtools faidx reference.fasta
        bwa index reference.fasta &> index.log
        if head -1 reference.fasta | grep -e '>E.*L' 1>/dev/null; then
        	rm lengths.txt &> /dev/null
        	for i in "${NAMES[@]}";
        		do
        		zcat $i.R.fq.gz | head -2 | tail -1 >> lengths.txt
        		done	
        	MaxLen=$(mawk '{ print length() | "sort -rn" }' lengths.txt| head -1)
        	INSERT=$(($MaxLen * 2 ))
        	INSERTH=$(($INSERT + 100 ))
        	INSERTL=$(($INSERT - 100 ))
        	SD=$(($INSERT / 10))
        	#BWA for mapping for all samples
        	for i in "${NAMES[@]}"
        	do
        	bwa mem reference.fasta $i.R1.fq.gz $i.R2.fq.gz -L 20,5 -I $INSERT,$SD,$INSERTH,$INSERTL -t $NUMProc -a -M -T 10 -A $optA -B $optB -O $optO -R "@RG\tID:$i\tSM:$i\tPL:Illumina" 2> bwa.$i.log | mawk '!/\t[2-9].[SH].*/' | mawk '!/[2-9].[SH]\t/' | samtools view -@$NUMProc -q 1 -SbT reference.fasta - > $i.bam 2>$i.bam.log
        	samtools sort -@$NUMProc $i.bam $i 
			mv $i.bam $i-RG.bam
			samtools index $i-RG.bam
        	done
        else
        	for i in "${NAMES[@]}"
        	do
        	bwa mem reference.fasta $i.R1.fq.gz $i.R2.fq.gz -L 20,5 -t $NUMProc -a -M -T 10 -A $optA -B $optB -O $optO -R "@RG\tID:$i\tSM:$i\tPL:Illumina" 2> bwa.$i.log | mawk '!/\t[2-9].[SH].*/' | mawk '!/[2-9].[SH]\t/' | samtools view -@$NUMProc -q 1 -SbT reference.fasta - > $i.bam 2>$i.bam.log
        	samtools sort -@$NUMProc $i.bam $i 
			mv $i.bam $i-RG.bam
			samtools index $i-RG.bam
        	done
        fi
fi

##Creating mapping intervals if needed, CreateIntervals function is defined later in script

#If mapping is being performed, intervals are created automatically

if [ "$MAP" != "no" ]; then
echo "Creating alignment intervals"
ls *-RG.bam >bamlist.list
CreateIntervals 
fi

#If mapping is not being performed, but intervals do not exist they are created
if [[ "$MAP" == "no" && ! -f "cat-RRG.bam" ]]; then
ls *-RG.bam >bamlist.list
CreateIntervals 
fi

Len=$(($NumInd - 1))

##SNP Calling

#Create list of BAM files
ls *-RG.bam >bamlist.list

#Check to make sure interval files have been created
if [[ "$MAP" == "no" && ! -f "map.bed" ]]; then
bamToBed -i cat-RRG.bam > map.bed
bedtools merge -i map.bed > mapped.bed
fi


##SNP Calling

#Create list of BAM files
ls *-RG.bam >bamlist.list

#This code estimates the coverage of reference intervals and removes intervals in 0.01% of depth
#This allows genotyping to be more effecient and eliminates extreme copy number loci from the data
coverageBed -abam cat-RRG.bam -b mapped.bed -counts > cov.stats
DP=$(mawk '{print $4}' cov.stats | sort -rn | perl -e '$d=.0001;@l=<>;print $l[int($d*$#l)]')
mawk -v x=$DP '$4 < x' cov.stats | cut -f1-3 | sort -V -k1,1 -k2,2 > mapped.F.bed


#Calculating intervals to split up variant calling over genomic intervals
NumMaps=$(cat mapped.F.bed | wc -l)
NumMaps=$(python -c "print int(round($NumMaps / 50,-1))")


split -l $NumMaps mapped.F.bed splitmap
ls splitmap* > splitlist
MAPNAMES=( `cat "splitlist" `)
NumBED=$( cat splitlist | wc -l )
NumBED=$(($NumBED - 0))
FB1=$(( $NUMProc / 2 ))

for ((i = 0; i <= $NumBED; i++));
do
j=$(( $i + 1 ))
mv ${MAPNAMES[$i]} mapped.$j.bed 2>/dev/null
done

echo "Using FreeBayes to call SNPs"

cut -f1 -d "_" namelist > p
paste namelist p > popmap
rm p

if [ "$NumBED" == "51" ]; then
parallel -j $FB1 --noswap --no-notice --delay 10 freebayes -L bamlist.list -t mapped.{}.bed -v raw.{}.vcf -f reference.fasta -m 5 -q 5 -E 3 --experimental-gls --min-repeat-entropy 1 -V  --populations popmap ::: {1..51}
else
parallel -j $FB1 --noswap --no-notice --delay 10 freebayes -L bamlist.list -t mapped.{}.bed -v raw.{}.vcf -f reference.fasta -m 5 -q 5 -E 3 --experimental-gls --min-repeat-entropy 1 -V  --populations popmap ::: {1..50}
fi

rm mapped.*.bed

mv raw.1.vcf raw.01.vcf
mv raw.2.vcf raw.02.vcf
mv raw.3.vcf raw.03.vcf
mv raw.4.vcf raw.04.vcf
mv raw.5.vcf raw.05.vcf
mv raw.6.vcf raw.06.vcf
mv raw.7.vcf raw.07.vcf
mv raw.8.vcf raw.08.vcf
mv raw.9.vcf raw.09.vcf

vcfcombine raw.*.vcf | sed -e 's/\t\.\:/\t\.\/\.\:/g' > TotalRawSNPs.vcf

if [ ! -d "raw.vcf" ]; then
mkdir raw.vcf
fi

mv raw.*.vcf ./raw.vcf

echo "Using VCFtools to parse SNPS.vcf for SNPS that are called in at least 90% of individuals"
vcftools --vcf TotalRawSNPs.vcf --geno 0.9 --out Final --counts --recode --non-ref-af 0.001 --max-non-ref-af 0.9999 --mac 1 --minQ 30 --recode-INFO-all &>VCFtools.log


##Checking for possible errors

if [ "$MAP" != "no" ]; then
ERROR1=$(mawk '/developer/' bwa* | wc -l 2> /dev/null) 
fi
ERROR2=$(mawk '/error/' *.bam.log | wc -l 2> /dev/null)
ERRORS=$(($ERROR1 + $ERROR2))

#Move various log files to own directory
if [ ! -d "logfiles" ]; then
mkdir logfiles
fi
mv *.txt *.log log ./logfiles 2> /dev/null

#Sending a completion email

if [ $ERRORS -gt 0 ]; then
        echo -e "dDocent has finished with errors in" `pwd` "\n\ndDocent started" $STARTTIME "\n\ndDocent finished" `date` "\n\nPlease check log files\n\n" `mawk '/After filtering, kept .* out of a possible/' ./logfiles/Final.log` "\n\ndDocent 1.2 \nThe 'd' is silent, hillbilly." | mailx -s "dDocent has finished with ERRORS!" $MAIL
else
        echo -e "dDocent has finished with an analysis in" `pwd` "\n\ndDocent started" $STARTTIME "\n\ndDocent finished" `date` "\n\n" `mawk '/After filtering, kept .* out of a possible/' ./logfiles/Final.log` "\n\ndDocent 1.2 \nThe 'd' is silent, hillbilly." | mailx -s "dDocent has finished" $MAIL
fi
}


##Function definitions

#Function for trimming reads using trim_galore
TrimReads () 

{ for i in "${NAMES[@]}"
do
#echo "Trimming Sample $i"
java -jar $TRIMMOMATIC PE -threads $NUMProc -phred33 $i.F.fq.gz $i.R.fq.gz $i.R1.fq.gz $i.unpairedF.fq.gz $i.R2.fq.gz $i.unpairedR.fq.gz ILLUMINACLIP:$ADAPTERS:2:30:10 LEADING:20 TRAILING:20 SLIDINGWINDOW:5:10 MINLEN:50 &> $i.trim.log
done
mkdir unpaired &>/dev/null
mv *unpaired*.gz ./unpaired &>/dev/null	
}

#Function to convert a file of unique sequences to fasta format
uniq2fasta()
{
i=1
cat $1 | while read line
do
echo ">Contig"$i
echo $line
i=$(($i + 1))
done
}


#Main function for assembly
Assemble()
{

###Assembly first concatenates forward and reverse reads and reduces the entire data set to concatenated reads that are present at a user defined level of coverage.  
###These reads are then split and assembled using Rainbow.  Then finally clustered with cd-hit.

#Creates a concatenated file of every read in fasta format
zcat *.F.fq.gz | mawk 'BEGIN{P=1}{if(P==1||P==2){gsub(/^[@]/,">");print}; if(P==4)P=0; P++}' > forward
zcat *.R.fq.gz | mawk 'BEGIN{P=1}{if(P==1||P==2){gsub(/^[@]/,">");print}; if(P==4)P=0; P++}' > reverse

#Reverse complements paired reads and pastes them together with forward reads with 10 Ns in between
seqtk seq -r reverse > reverseRC
mergefq.pl forward reverseRC concat.fasta

#Clean up of large files
rm forward
rm reverse
rm reverseRC

#Convert fasta format to just sequences
mawk '!/>/' concat.fasta > concat.seq

#Find every unique sequence and count the number of occurrences
perl -e 'while (<>) {chomp; $z{$_}++;} while(($k,$v) = each(%z)) {print "$v\t$k\n";}' concat.seq > uniq.seqs

#Create a data file with the number of unique sequences and the number of occurrences
ONE=$(mawk '$1 >= 2' uniq.seqs | wc -l)
echo -e "2""\t""$ONE" > uniqseq.data

for ((i = 3; i <= 50; i++));
do
J=$(mawk -v x=$i '$1 >= x' uniq.seqs | wc -l)
echo -e "$i""\t""$J" >> uniqseq.data
done

#Plot graph of above data
gnuplot << \EOF 
set terminal dumb size 120, 30
set autoscale 
unset label
set title "Number of Unique Sequences with More than X Occurrences"
set xlabel "Number of Occurrences"
set ylabel "Number of Unique Sequences"
plot 'uniqseq.data' with dots notitle
pause -1
EOF

#Ask user to pick cutoff
##The cutoff should roughly correlate to the expected coverage per RAD loci.  This is an easy way to get rid of reads only corresponding to a few individuals

echo -en "\007"
echo -en "\007"
echo -en "\007"
echo -e "Please choose data cutoff.  Pick point right before assymptote, probably between 10 and 30.  \n\nIt approximates the expected coverage per RAD fragment."

read CUTOFF

mawk -v x=$CUTOFF '$1 >= x' uniq.seqs | cut -f 2 > totaluniqseq

#Prints instructions on how to move analysis to background and disown process
echo "At this point, all configuration information has been enter and dDocent may take several hours to run." 
echo "It is recommended that you move this script to a background operation and disable terminal input and output."
echo "All data and logfiles will still be recorded."
echo "To do this:"
echo "Press control and Z simultaneously"
echo "Type 'bg' without the quotes and press enter"
echo "Type 'disown -h' again without the quotes and press enter"
echo ""
echo "Now sit back, relax, and wait for your analysis to finish."


#Convert reads to fasta
uniq2fasta totaluniqseq > uniq.fasta

#Perl function to split contigs by length

sed -e 's/NNNNNNNNNN/\t/g' uniq.fasta | cut -f1 > uniq.F.fasta
sed -e 's/NNNNNNNNNN/\t/g' uniq.fasta | cut -f2 > uniq.R.fasta

seqtk seq -r uniq.R.fasta > uniq.RC.fasta
rm uniq.R.fasta

#Now use rainbow to cluster and assemble reads into longer contigs
rainbow cluster -m 6 -1 uniq.F.fasta -2 uniq.RC.fasta > rcluster 2>rainbow.log
rainbow div -i rcluster -o rbdiv.out -f 0.01
rainbow merge -o rbasm.out -a -i rbdiv.out -r 2
select_best_rbcontig_plus_read1.pl rbasm.out rbdiv.out >rainbow.fasta

#cd-hit to cluster reads based on sequence similarity
cd-hit-est -i rainbow.fasta -o referenceRC.fasta -M 0 -T 0 -c $simC &>cdhit.log

seqtk seq -r referenceRC.fasta > reference.fasta.original
rm referenceRC.fasta

sed -e 's/^C/NC/g' -e 's/^A/NA/g' -e 's/^G/NG/g' -e 's/^T/NT/g' -e 's/T$/TN/g' -e 's/A$/AN/g' -e 's/C$/CN/g' -e 's/G$/GN/g' reference.fasta.original > reference.fasta

samtools faidx reference.fasta
bwa index reference.fasta

}

##Create alignment intervals
##This takes advantage of the fact that RAD loci are very discrete.  Instead of calculating intervals for every BAM file,
##this function merges all bam files together and removes duplicates.  This overall BAM file 
##is used to create a single list of intervals, saving a large amount of computational time.

CreateIntervals()
{
bamtools merge -list bamlist.list | samtools rmdup - cat-RRG.bam &>/dev/null
samtools index cat-RRG.bam 
wait

#Create intervals
bamToBed -i cat-RRG.bam > map.bed
bedtools merge -i map.bed > mapped.bed
}

#Actually starts program
main

#Compress Large Leftover files
rm concat.fasta.gz concat.seq.gz rcluster.gz rbdiv.out.gz rbasm.out.gz rainbow.fasta.gz reference.fasta.original.gz uniq.seqs.gz uniq.fasta.gz totaluniqseq.gz uniq.F.fasta.gz uniq.RC.fasta.gz 2> /dev/null
gzip -f concat.fasta concat.seq rcluster rbdiv.out rbasm.out rainbow.fasta reference.fasta.original uniq.seqs uniq.fasta totaluniqseq uniq.F.fasta uniq.RC.fasta 2> /dev/null &


